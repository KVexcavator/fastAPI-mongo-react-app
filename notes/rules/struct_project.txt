Лучший способ структурировать FastAPI-проект — разнести маршруты (роуты) и бизнес-логику по отдельным модулям. Разделение на модули улучшает читаемость, масштабируемость и тестируемость кода.  

Структура проекта :  
```
fastapi_project/
│── app/
│   ├── main.py
│   ├── api/
│   │   ├── __init__.py
│   │   ├── v1/
│   │   │   ├── __init__.py
│   │   │   ├── users.py
│   │   │   ├── posts.py
│   ├── services/
│   │   ├── __init__.py
│   │   ├── user_service.py
│   │   ├── post_service.py
│   ├── models/
│   │   ├── __init__.py
│   │   ├── user.py
│   │   ├── post.py
│   ├── schemas/
│   │   ├── __init__.py
│   │   ├── user_schema.py
│   │   ├── post_schema.py
│   ├── db.py
│── tests/
│── requirements.txt
│── Dockerfile
│── .env
```

1. Разносим маршруты по файлам 
В директории app/api/v1/ создаем отдельные файлы для разных сущностей:  
users.py 
```python
from fastapi import APIRouter, Depends
from app.services.user_service import UserService
from app.schemas.user_schema import UserCreate, UserResponse

router = APIRouter(prefix="/users", tags=["Users"])

@router.post("/", response_model=UserResponse)
def create_user(user: UserCreate, service: UserService = Depends()):
    return service.create_user(user)
```
posts.py 
```python
from fastapi import APIRouter, Depends
from app.services.post_service import PostService
from app.schemas.post_schema import PostCreate, PostResponse

router = APIRouter(prefix="/posts", tags=["Posts"])

@router.post("/", response_model=PostResponse)
def create_post(post: PostCreate, service: PostService = Depends()):
    return service.create_post(post)
```

2. Логика (сервисы) отдельно от маршрутов  
В папке app/services/ создаем сервисы.

user_service.py 
```python
from app.models.user import User
from app.schemas.user_schema import UserCreate

class UserService:
    def create_user(self, user: UserCreate) -> User:
        # Здесь может быть логика сохранения в БД
        return User(id=1, name=user.name, email=user.email)
```
post_service.py  
```python
from app.models.post import Post
from app.schemas.post_schema import PostCreate

class PostService:
    def create_post(self, post: PostCreate) -> Post:
        return Post(id=1, title=post.title, content=post.content)
```

3. Подключаем маршруты в main.py 
В app/main.py регистрируем маршруты:  
```python
from fastapi import FastAPI
from app.api.v1 import users, posts

app = FastAPI(title="My FastAPI Project")

# Подключаем роуты
app.include_router(users.router)
app.include_router(posts.router)
```

4. Определяем модели и схемы  
В app/schemas/ создаем схемы для Pydantic.

user_schema.py  
```python
from pydantic import BaseModel, EmailStr

class UserCreate(BaseModel):
    name: str
    email: EmailStr

class UserResponse(UserCreate):
    id: int
```
post_schema.py 
```python
from pydantic import BaseModel

class PostCreate(BaseModel):
    title: str
    content: str

class PostResponse(PostCreate):
    id: int
```
