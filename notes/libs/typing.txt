typing –≤ Python  
typing ‚Äî —ç—Ç–æ –º–æ–¥—É–ª—å –≤ Python, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–¥–µ.  
–≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–¥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–æ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã).  

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è typing  

–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–∏–º–µ—Ä  
```python
def greet(name: str) -> str:
    return f"–ü—Ä–∏–≤–µ—Ç, {name}!"
```
–ó–¥–µ—Å—å name: str –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∂–¥—ë—Ç —Å—Ç—Ä–æ–∫—É, -> str –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤–µ—Ä–Ω—ë—Ç —Å—Ç—Ä–æ–∫—É.  

–¢–∏–ø–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤, —Å–ª–æ–≤–∞—Ä–µ–π, –∫–æ—Ä—Ç–µ–∂–µ–π 
```python
from typing import List, Dict, Tuple

def process_data(users: List[str], scores: Dict[str, int]) -> Tuple[str, int]:
    best_user = max(scores, key=scores.get)
    return best_user, scores[best_user]
```
–ó–¥–µ—Å—å:  
- List[str] ‚Äî —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (["Alice", "Bob"]).  
- Dict[str, int] ‚Äî —Å–ª–æ–≤–∞—Ä—å, ({"Alice": 90, "Bob": 80}).  
- Tuple[str, int] ‚Äî –∫–æ—Ä—Ç–µ–∂ (("Alice", 90)).  

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Any (–∫–æ–≥–¥–∞ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω)  
```python
from typing import Any

def process(data: Any) -> None:
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ: {data}")
```
Optional (–∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None)  
```python
from typing import Optional

def find_user(user_id: int) -> Optional[str]:
    if user_id == 1:
        return "Alice"
    return None  # –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None
```
Optional[str] –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—ë—Ç –ª–∏–±–æ —Å—Ç—Ä–æ–∫—É, –ª–∏–±–æ None.

---

Type Alias (—Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ç–∏–ø–∞) 
```python
from typing import Dict

UserScores = Dict[str, int]  # –ù–æ–≤—ã–π —Ç–∏–ø

def get_top_user(scores: UserScores) -> str:
    return max(scores, key=scores.get)
```
–¢–µ–ø–µ—Ä—å UserScores –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–∏–ø, –≤–º–µ—Å—Ç–æ Dict[str, int].

---

TypedDict (—Ç–∏–ø–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–æ–ª—è–º–∏)  
```python
from typing import TypedDict

class User(TypedDict):
    name: str
    age: int

def show_user(user: User) -> None:
    print(f"{user['name']} ‚Äî {user['age']} –ª–µ—Ç")
```
–¢–µ–ø–µ—Ä—å User ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ name: str –∏ age: int.

---

–ö–ª–∞—Å—Å—ã –∏ typing  
```python
from typing import List

class User:
    def __init__(self, name: str, friends: List[str]) -> None:
        self.name = name
        self.friends = friends

    def add_friend(self, friend: str) -> None:
        self.friends.append(friend)
```

Callable (—Ç–∏–ø–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π)  
```python
from typing import Callable

def execute(func: Callable[[int, int], int], a: int, b: int) -> int:
    return func(a, b)

def add(x: int, y: int) -> int:
    return x + y

print(execute(add, 2, 3))  # –í—ã–≤–µ–¥–µ—Ç 5
```
Callable[[int, int], int] ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ int –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int.

Annotated –∏–∑ –º–æ–¥—É–ª—è typing –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ —Ç–∏–ø–∞–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.

–û–±—â–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å:
```python
from typing import Annotated

MyType = Annotated[BaseType, –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ]
```
BaseType ‚Äî –æ–±—ã—á–Ω—ã–π —Ç–∏–ø (str, int, list[str] –∏ —Ç. –¥.).
–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã.

üöÄ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Annotated?
–¢–∏–ø–∏–∑–∞—Ü–∏—è —Å –¥–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
```python
Age = Annotated[int, Field(ge=18)]  # –í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–µ–Ω—å—à–µ 18
```
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
```python
Price = Annotated[float, BeforeValidator(float)]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫ float
```
–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π –≤ FastAPI
```python
from fastapi import Query

Name = Annotated[str, Query(min_length=3)]
```